setup={
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
})
microbenchmark(TSPsolve(couts, 'repetitive_nn'), TSPsolve(couts,'nearest_insertion'),
TSPsolve(couts, 'two_opt'), TSPnearest(couts)$longueur, TSPbranch(couts), times=100,
setup={
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
})
microbenchmark(TSPsolve(couts, 'repetitive_nn'), TSPsolve(couts,'nearest_insertion'),
TSPsolve(couts, 'two_opt'), TSPnearest(couts)$longueur, TSPbranch(couts), times=100,
setup={
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
})
microbenchmark(TSPsolve(couts, 'repetitive_nn'), TSPsolve(couts,'nearest_insertion'),
TSPsolve(couts, 'two_opt'), TSPnearest(couts)$longueur, TSPbranch(couts), times=400,
setup={
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
})
testNearestAndBranch <- mean(nearestDist) - mean(branchDist)
t.test(nearestDist - branchDist, paired=FALSE, mu=0)
par(mfrow=c(1,2)) # 2 graphiques sur 1 ligne
matplot(seqn, temps, xlab='n', ylab='temps')
matplot(seqn, log(temps)^2, xlab='n', ylab=expression(log(temps)^2))
vect_temps <- log(as.vector(temps))^2
vect_dim <- rep(seqn,times=10)
temps.lm <- lm(vect_temps ~ vect_dim)
summary(temps.lm)
par(mfrow=c(1,2)) # 2 graphiques sur 1 ligne
matplot(seqn, temps, xlab='n', ylab='temps', pch=seqn)
matplot(seqn, log(temps)^2, xlab='n', ylab=expression(log(temps)^2), pch=seqn)
vect_temps <- log(as.vector(temps))^2
vect_dim <- rep(seqn,times=10)
temps.lm <- lm(vect_temps ~ vect_dim)
summary(temps.lm)
par(mfrow=c(1,2)) # 2 graphiques sur 1 ligne
matplot(seqn, temps, xlab='n', ylab='temps', pch=seqn)
matplot(seqn, log(temps)^2, xlab='n', ylab=expression(log(temps)^2), pch=seqn)
vect_temps <- log(as.vector(temps))^2
vect_dim <- rep(seqn,times=10)
temps.lm <- lm(vect_temps ~ vect_dim)
summary(temps.lm)
par(mfrow=c(2,2))
plot(temps.lm)
shapiro.test(residuals(temps.lm))
shapiro.test(residuals(temps.lm))
shapiro.test(residuals(temps.lm))
set.seed(42)
knitr::opts_chunk$set(echo = TRUE)
## il est possible qu'avant d'installer le package TSPpackage vous deviez installer ou rÃ©-installer Rcpp
#install.packages('Rcpp')
# install.packages('./TSPpackage_1.0.tar.gz',repos=NULL,type='bin') ## pour linux
# install.packages('./TSPpackage_1.0.zip',repos=NULL,type='bin')    ## pour windows
## je ne peux pas fournir de package pour mac...
## Appels aux packages, aprÃ¨s les avoir installÃ©s !
library(sp)
library(maps)
library(microbenchmark)
library(TSP)
library(TSPpackage)
villes <- read.csv('DonneesGPSvilles.csv',header=TRUE,dec='.',sep=';',quote="\"")
str(villes)
coord <- cbind(villes$longitude,villes$latitude)
dist <- distanceGPS(coord)
voisins <- TSPnearest(dist)
pathOpt <- c(1,8,9,4,21,13,7,10,3,17,16,20,6,19,15,18,11,5,22,14,12,2)
par(mfrow=c(1,2),mar=c(1,1,2,1))
plotTrace(coord[voisins$chemin,], title='Plus proches voisins')
plotTrace(coord[pathOpt,], title='Chemin optimal')
voisins$longueur
calculeLongueur(dist,pathOpt)
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
testNearestAndBranch <- mean(nearestDist) - mean(branchDist)
t.test(nearestDist - branchDist, paired=FALSE, mu=0)
shapiro.test(residuals(temps.lm))
shapiro.test(residuals(temps.lm))
shapiro.test(residuals(temps.lm))
temps.moy <- rowMeans(temps)
vect_temps.moy <- log(as.vector(temps.moy))^2
temps.moy.lm <- lm(vect_temps.moy ~ seqn)
summary(temps.moy.lm)
temps.moy <- rowMeans(temps)
vect_temps.moy <- log(as.vector(temps.moy))^2
temps.moy.lm <- lm(vect_temps.moy ~ seqn)
summary(temps.moy.lm)
par(mfrow=c(2,2))
plot(temps.moy.lm)
shapiro.test(residuals(temps.moy.lm))
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
summary(tps.lm)
par(mfrow=c(2,2))
plot(tps.lm)
step(tps.lm)
dataset
dataset[,!"mean.dist"]
step(tps.lm)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(dataset) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
View(dataset)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
step(tps.lm_aic)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
lm(vect_tps ~., data = datasetAfterAIC)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(dataset) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
lm(vect_tps ~., data = datasetAfterAIC)
View(datasetAfterAIC)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(datasetAfterAIC) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
View(datasetAfterAIC)
tps.lm
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
step(tps.lm_aic)
step(tps.lm)
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
summary(tps.lm)
par(mfrow=c(2,2))
plot(tps.lm)
step(tps.lm)
dataset <- data.frame(matrix(ncol = 7, nrow = 70))
colnames(dataset) <- c("sqrtdim", "mean.long","mean.dist",
"sd.dist","mean.deg", "sd.deg", "diameter")
dataset$sqrtdim = sqrt(data.graph$dim)
dataset$mean.long = data.graph$mean.long
dataset$mean.dist = data.graph$mean.dist
dataset$sd.dist = data.graph$sd.dist
dataset$mean.deg = data.graph$mean.deg
dataset$sd.deg = data.graph$sd.deg
dataset$diameter = data.graph$diameter
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
summary(tps.lm)
par(mfrow=c(2,2))
plot(tps.lm)
step(tps.lm)
data.graph <- read.csv('DonneesTSP.csv',header=TRUE,dec='.',sep=',',quote="\"")
data.graph$dim = sqrt(data.graph$dim)
vect_tps <- log(as.vector(data.graph$tps))
tps.lm <- lm(vect_tps ~., data = data.graph)
summary(tps.lm)
par(mfrow=c(2,2))
plot(tps.lm)
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
summary(tps.lm)
data.graph <- read.csv('DonneesTSP.csv',header=TRUE,dec='.',sep=',',quote="\"")
dataset <- data.frame(matrix(ncol = 7, nrow = 70))
colnames(dataset) <- c("sqrtdim", "mean.long","mean.dist",
"sd.dist","mean.deg", "sd.deg", "diameter")
dataset$sqrtdim = sqrt(data.graph$dim)
dataset$mean.long = data.graph$mean.long
dataset$mean.dist = data.graph$mean.dist
dataset$sd.dist = data.graph$sd.dist
dataset$mean.deg = data.graph$mean.deg
dataset$sd.deg = data.graph$sd.deg
dataset$diameter = data.graph$diameter
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
step(tps.lm)
View(datasetAfterAIC)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(datasetAfterAIC) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
temps.moy <- rowMeans(temps)
vect_temps.moy <- log(as.vector(temps.moy))^2
temps.moy.lm <- lm(vect_temps.moy ~ seqn)
summary(temps.moy.lm)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(datasetAfterAIC) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
tps.lm
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
shapiro.test(residuals(tps.lm_aic))
shapiro.test(residuals(tps.lm_aic))
t.test(nearestDist - branchDist, paired=FALSE, mu=0)
par(mfrow=c(2,2))
plot(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
set.seed(42)
knitr::opts_chunk$set(echo = TRUE)
## il est possible qu'avant d'installer le package TSPpackage vous deviez installer ou rÃ©-installer Rcpp
#install.packages('Rcpp')
# install.packages('./TSPpackage_1.0.tar.gz',repos=NULL,type='bin') ## pour linux
# install.packages('./TSPpackage_1.0.zip',repos=NULL,type='bin')    ## pour windows
## je ne peux pas fournir de package pour mac...
## Appels aux packages, aprÃ¨s les avoir installÃ©s !
library(sp)
library(maps)
library(microbenchmark)
library(TSP)
library(TSPpackage)
villes <- read.csv('DonneesGPSvilles.csv',header=TRUE,dec='.',sep=';',quote="\"")
str(villes)
coord <- cbind(villes$longitude,villes$latitude)
dist <- distanceGPS(coord)
voisins <- TSPnearest(dist)
pathOpt <- c(1,8,9,4,21,13,7,10,3,17,16,20,6,19,15,18,11,5,22,14,12,2)
par(mfrow=c(1,2),mar=c(1,1,2,1))
plotTrace(coord[voisins$chemin,], title='Plus proches voisins')
plotTrace(coord[pathOpt,], title='Chemin optimal')
voisins$longueur
calculeLongueur(dist,pathOpt)
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
testNearestAndBranch <- mean(nearestDist) - mean(branchDist)
results <- vector(length = 250)
methods <- vector(length = 250)
results <- c(nearestDist, branchDist, nearest_insertion,repetitive_nn, two_opt)
for (i in 1:250){
if (i < 51){
methods[i] <- 'nearest'
}
else if (i < 101){
methods[i] <- 'Branch&Bound'
}
else if (i < 151) {
methods[i] <- 'nearest_insertion'
}
else if (i < 201) {
methods[i] <- 'repetitive_nn'
}
else {
methods[i] <- 'two_opt'
}
}
pairwise.t.test(results,methods,adjust.method='bonferroni')
microbenchmark(sqrt(x),x^0.5, times=100, setup={x <- runif(1)})
microbenchmark(TSPsolve(couts, 'repetitive_nn'), TSPsolve(couts,'nearest_insertion'),
TSPsolve(couts, 'two_opt'), TSPnearest(couts)$longueur, TSPbranch(couts), times=400,
setup={
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
})
seqn <- seq(4,20,1)
temps <- matrix(ncol=10, nrow=length(seqn))
for (i in 1:length(seqn)){
temps[i,] <- microbenchmark(TSPsolve(couts, method = 'branch'),
times = 10,
setup = { n <- seqn[i]
couts <- distance(cbind(x = runif(n), y = runif(n)))}
)$time
}
par(mfrow=c(1,2)) # 2 graphiques sur 1 ligne
matplot(seqn, temps, xlab='n', ylab='temps', pch=seqn)
matplot(seqn, log(temps)^2, xlab='n', ylab=expression(log(temps)^2), pch=seqn)
vect_temps <- log(as.vector(temps))^2
vect_dim <- rep(seqn,times=10)
temps.lm <- lm(vect_temps ~ vect_dim)
summary(temps.lm)
par(mfrow=c(2,2))
plot(temps.lm)
shapiro.test(residuals(temps.lm))
temps.moy <- rowMeans(temps)
vect_temps.moy <- log(as.vector(temps.moy))^2
temps.moy.lm <- lm(vect_temps.moy ~ seqn)
summary(temps.moy.lm)
par(mfrow=c(2,2))
plot(temps.moy.lm)
shapiro.test(residuals(temps.moy.lm))
data.graph <- read.csv('DonneesTSP.csv',header=TRUE,dec='.',sep=',',quote="\"")
dataset <- data.frame(matrix(ncol = 7, nrow = 70))
colnames(dataset) <- c("sqrtdim", "mean.long","mean.dist",
"sd.dist","mean.deg", "sd.deg", "diameter")
dataset$sqrtdim = sqrt(data.graph$dim)
dataset$mean.long = data.graph$mean.long
dataset$mean.dist = data.graph$mean.dist
dataset$sd.dist = data.graph$sd.dist
dataset$mean.deg = data.graph$mean.deg
dataset$sd.deg = data.graph$sd.deg
dataset$diameter = data.graph$diameter
vect_tps <- log(as.vector(data.graph$tps))^2
tps.lm <- lm(vect_tps ~., data = dataset)
step(tps.lm)
par(mfrow=c(2,2))
plot(tps.lm_aic)
datasetAfterAIC <- data.frame(matrix(ncol = 6, nrow = 70))
colnames(datasetAfterAIC) <- c("sqrtdim", "mean.long",
"sd.dist","mean.deg", "sd.deg", "diameter")
datasetAfterAIC$sqrtdim = sqrt(data.graph$dim)
datasetAfterAIC$mean.long = data.graph$mean.long
datasetAfterAIC$sd.dist = data.graph$sd.dist
datasetAfterAIC$mean.deg = data.graph$mean.deg
datasetAfterAIC$sd.deg = data.graph$sd.deg
datasetAfterAIC$diameter = data.graph$diameter
tps.lm_aic <- lm(vect_tps ~., data = datasetAfterAIC)
summary(tps.lm_aic)
par(mfrow=c(2,2))
plot(tps.lm_aic)
shapiro.test(residuals(tps.lm_aic))
shapiro.test(residuals(tps.lm_aic))
par(mfrow=c(2,2))
plot(tps.lm_aic)
shapiro.test(residuals(tps.lm_aic))
par(mfrow=c(2,2))
plot(tps.lm_aic)
t.test(nearest - branch, paired = FALSE, mu = 0)
nearest
nearestDist
t.test(nearestDist - branchDist, paired = FALSE, mu = 0)
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(microbenchmark)
library(TSP)
library(TSPpackage)
villes <- read.csv('DonneesGPSvilles.csv',header=TRUE,dec='.',sep=';',quote="\"")
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
t.test(nearestDist - branchDist, paired=FALSE, mu=0)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
repetitive_nn <- vector(length = 50)
nearest_insertion <- vector(length = 50)
two_opt <- vector(length = 50)
nearestDist <- vector(length = 50)
branchDist <- vector(length = 50)
for (i in 1:50){
n <- 10
sommets <- data.frame(x = runif(n), y = runif(n))
couts <- distance(sommets)
repetitive_nn[i] <- TSPsolve(couts, 'repetitive_nn')
nearest_insertion[i] <- TSPsolve(couts, 'nearest_insertion')
two_opt[i] <- TSPsolve(couts, 'two_opt')
nearestDist[i] <-TSPnearest(couts)$longueur
branchDist[i] <- TSPbranch(couts)
}
mat_boxplot <- cbind(repetitive_nn,nearest_insertion,two_opt,nearestDist,branchDist)
par(mfrow=c(1,1))
boxplot(mat_boxplot,notch=TRUE)
